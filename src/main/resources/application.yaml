spring:
  application:
    name: tacc-backend

  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}

  jpa:
    show-sql: true         # Log SQL statements (disable in production)
    hibernate:
      ddl-auto: create    # Update database when necessary (set to "update" in production)
    open-in-view: false   # Don't keep JPA session open for whole HTTP request

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/authorized/google"
            scope: https://www.googleapis.com/auth/calendar.readonly
        provider:
          google:
            issuer-uri: https://accounts.google.com
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo

server:
  port: 8088

logging:
  file:
    path: logs
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG

google:
  maps:
    api:
      key: ${GOOGLE_MAPS_API_KEY}

scheduling:
  time:
    unit: minutes # use minutes for production, seconds for testing

# custom config
security:
  encryption:
    attribute:
      # for encrypting columns
      password: ${ATTRIBUTE_ENCRYPTION_PASSWORD}
      salt: ${ATTRIBUTE_ENCRYPTION_SALT}

  authentication:
    roles:
      # for user registration sync with keycloak
      create-user: ${KEYCLOAK_SYN_CREATE_ROLE}

  keycloak:
    # for user deletion sync with keycloak
    admin-api:
      server-url: ${KEYCLOAK_ADMIN_API_URL}
      realm: ${KEYCLOAK_ADMIN_API_REALM}
      client-id: ${KEYCLOAK_ADMIN_API_CLIENT_ID}
      client-secret: ${KEYCLOAK_ADMIN_API_CLIENT_SECRET}